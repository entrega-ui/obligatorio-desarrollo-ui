{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from \"@apollo/client/link/error\";\nvar errorLink = onError(function (_ref) {\n  var graphQLErrors = _ref.graphQLErrors,\n      networkError = _ref.networkError;\n  if (graphQLErrors) graphQLErrors.map(function (_ref2) {\n    var message = _ref2.message,\n        locations = _ref2.locations,\n        path = _ref2.path;\n    return console.log(\"[GraphQL error]: Message: \" + message + \", Location: \" + locations + \", Path: \" + path);\n  });\n  if (networkError) console.log(\"[Network error]: \" + networkError);\n});\nvar uri = process.env.NODE_ENV === 'production' ? 'https://ui-backend.herokuapp.com/graphql' : 'http://localhost:5000/graphql';\nconsole.log('ENV= ', uri);\nvar httpLink = createHttpLink({\n  uri: uri\n});\nvar authLink = setContext(function _callee(_, _ref3) {\n  var headers, token;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          headers = _ref3.headers;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(localStorage.getItem('authorization'));\n\n        case 3:\n          token = _context.sent;\n          return _context.abrupt(\"return\", {\n            headers: _objectSpread(_objectSpread({}, headers), {}, {\n              authorization: token ? \"\" + token : \"\"\n            })\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nvar client = new ApolloClient({\n  link: errorLink.concat(authLink).concat(httpLink),\n  cache: new InMemoryCache()\n});\nexport default client;","map":{"version":3,"sources":["C:/Users/marti/Source/Repos/obligatorio-desarrollo-ui/frontend/src/apollo-client/client.js"],"names":["ApolloClient","createHttpLink","InMemoryCache","setContext","onError","errorLink","graphQLErrors","networkError","map","message","locations","path","console","log","uri","process","env","NODE_ENV","httpLink","authLink","_","headers","localStorage","getItem","token","authorization","client","link","concat","cache"],"mappings":";;;;;;;AAAA,SAASA,YAAT,EAAuBC,cAAvB,EAAuCC,aAAvC,QAA4D,gBAA5D;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,OAAT,QAAwB,2BAAxB;AAEA,IAAMC,SAAS,GAAGD,OAAO,CAAC,gBAAqC;AAAA,MAAlCE,aAAkC,QAAlCA,aAAkC;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;AAC7D,MAAID,aAAJ,EACEA,aAAa,CAACE,GAAd,CAAkB;AAAA,QAAGC,OAAH,SAAGA,OAAH;AAAA,QAAYC,SAAZ,SAAYA,SAAZ;AAAA,QAAuBC,IAAvB,SAAuBA,IAAvB;AAAA,WAChBC,OAAO,CAACC,GAAR,gCAC+BJ,OAD/B,oBACqDC,SADrD,gBACyEC,IADzE,CADgB;AAAA,GAAlB;AAKF,MAAIJ,YAAJ,EAAkBK,OAAO,CAACC,GAAR,uBAAgCN,YAAhC;AACnB,CARwB,CAAzB;AAUA,IAAMO,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,0CAAxC,GAAqF,+BAAjG;AACAL,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBC,GAArB;AACA,IAAMI,QAAQ,GAAGjB,cAAc,CAAC;AAC9Ba,EAAAA,GAAG,EAAHA;AAD8B,CAAD,CAA/B;AAIA,IAAMK,QAAQ,GAAGhB,UAAU,CAAC,iBAAOiB,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYC,UAAAA,OAAZ,SAAYA,OAAZ;AAAA;AAAA,2CAENC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAFM;;AAAA;AAEpBC,UAAAA,KAFoB;AAAA,2CAInB;AACLH,YAAAA,OAAO,kCACFA,OADE;AAELI,cAAAA,aAAa,EAAED,KAAK,QAAMA,KAAN,GAAgB;AAF/B;AADF,WAJmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAA3B;AAYA,IAAME,MAAM,GAAG,IAAI1B,YAAJ,CAAiB;AAC9B2B,EAAAA,IAAI,EAAEtB,SAAS,CAACuB,MAAV,CAAiBT,QAAjB,EAA2BS,MAA3B,CAAkCV,QAAlC,CADwB;AAE9BW,EAAAA,KAAK,EAAE,IAAI3B,aAAJ;AAFuB,CAAjB,CAAf;AAMA,eAAewB,MAAf","sourcesContent":["import { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport { onError } from \"@apollo/client/link/error\";\r\n\r\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\r\n  if (graphQLErrors)\r\n    graphQLErrors.map(({ message, locations, path }) =>\r\n      console.log(\r\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\r\n      )\r\n    );\r\n  if (networkError) console.log(`[Network error]: ${networkError}`);\r\n});\r\n\r\nconst uri = process.env.NODE_ENV === 'production' ? 'https://ui-backend.herokuapp.com/graphql' : 'http://localhost:5000/graphql';\r\nconsole.log('ENV= ', uri);\r\nconst httpLink = createHttpLink({\r\n  uri,\r\n});\r\n\r\nconst authLink = setContext(async (_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = await localStorage.getItem('authorization');\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `${token}` : \"\",\r\n    }\r\n  }\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: errorLink.concat(authLink).concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n\r\n});\r\n\r\nexport default client\r\n"]},"metadata":{},"sourceType":"module"}